"""
History browser for PCB inspection system.

This module provides a comprehensive history browser for viewing
past inspection results, searching, filtering, and detailed analysis.
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
import json
import os
import logging

from core.config import GUI_CONFIG, DEFECT_CLASSES, DEFECT_COLORS
from core.utils import setup_logging

class HistoryBrowser:
    """
    Comprehensive history browser for inspection results.
    
    Features:
    - Chronological inspection history
    - Search and filter capabilities
    - Detailed inspection viewer
    - Export functionality
    - Statistics summary
    """
    
    def __init__(self, parent=None):
        """
        Initialize history browser.
        
        Args:
            parent: Parent window (optional)
        """
        self.logger = setup_logging(__name__)
        self.parent = parent
        self.database = None  # Will be set by main system
        
        # Create history window
        self.window = tk.Toplevel(parent) if parent else tk.Tk()
        self._setup_window()
        
        # Create GUI components
        self._create_layout()
        
        # Initialize data
        self.current_inspections = []
        self.filtered_inspections = []
        
        self.logger.info("History browser initialized")
    
    def _setup_window(self):
        """Setup history window."""
        self.window.title("PCB Inspection History Browser")
        self.window.geometry("1000x700")
        self.window.minsize(800, 600)
        
        if self.parent:
            self.window.transient(self.parent)
            self.window.grab_set()
    
    def _create_layout(self):
        """Create history browser layout."""
        # Main container
        main_frame = ttk.Frame(self.window, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.window.columnconfigure(0, weight=1)
        self.window.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # Create sections
        self._create_filter_panel(main_frame)
        self._create_history_table(main_frame)
        self._create_details_panel(main_frame)
        self._create_action_buttons(main_frame)
    
    def _create_filter_panel(self, parent):
        """Create filter and search panel."""
        filter_frame = ttk.LabelFrame(parent, text="Search & Filter", padding="10")
        filter_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Search by date range
        date_frame = ttk.Frame(filter_frame)
        date_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(date_frame, text="Date Range:").grid(row=0, column=0, padx=(0, 5))
        
        # Start date
        ttk.Label(date_frame, text="From:").grid(row=0, column=1, padx=(10, 5))
        self.start_date_var = tk.StringVar(value=(datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d"))\n        start_date_entry = ttk.Entry(date_frame, textvariable=self.start_date_var, width=12)\n        start_date_entry.grid(row=0, column=2, padx=(0, 10))\n        \n        # End date\n        ttk.Label(date_frame, text="To:").grid(row=0, column=3, padx=(10, 5))\n        self.end_date_var = tk.StringVar(value=datetime.now().strftime("%Y-%m-%d"))\n        end_date_entry = ttk.Entry(date_frame, textvariable=self.end_date_var, width=12)\n        end_date_entry.grid(row=0, column=4, padx=(0, 10))\n        \n        # Filter options\n        filter_options_frame = ttk.Frame(filter_frame)\n        filter_options_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))\n        \n        # Defect filter\n        ttk.Label(filter_options_frame, text="Defect Type:").grid(row=0, column=0, padx=(0, 5))\n        \n        self.defect_filter_var = tk.StringVar(value="All")\n        defect_combo = ttk.Combobox(\n            filter_options_frame,\n            textvariable=self.defect_filter_var,\n            values=["All"] + DEFECT_CLASSES,\n            state="readonly",\n            width=15\n        )\n        defect_combo.grid(row=0, column=1, padx=(0, 20))\n        \n        # Status filter\n        ttk.Label(filter_options_frame, text="Status:").grid(row=0, column=2, padx=(0, 5))\n        \n        self.status_filter_var = tk.StringVar(value="All")\n        status_combo = ttk.Combobox(\n            filter_options_frame,\n            textvariable=self.status_filter_var,\n            values=["All", "Passed", "Failed"],\n            state="readonly",\n            width=10\n        )\n        status_combo.grid(row=0, column=3, padx=(0, 20))\n        \n        # Apply filters button\n        ttk.Button(\n            filter_options_frame,\n            text="Apply Filters",\n            command=self._apply_filters,\n            width=12\n        ).grid(row=0, column=4, padx=(0, 10))\n        \n        # Clear filters button\n        ttk.Button(\n            filter_options_frame,\n            text="Clear",\n            command=self._clear_filters,\n            width=8\n        ).grid(row=0, column=5, padx=(0, 10))\n        \n        # Results count\n        self.results_label = ttk.Label(filter_options_frame, text="Results: 0")\n        self.results_label.grid(row=0, column=6, padx=(20, 0))\n        \n        # Configure grid weights\n        filter_frame.columnconfigure(0, weight=1)\n        date_frame.columnconfigure(5, weight=1)\n        filter_options_frame.columnconfigure(7, weight=1)\n    \n    def _create_history_table(self, parent):\n        """Create history table."""\n        table_frame = ttk.LabelFrame(parent, text="Inspection History", padding="10")\n        table_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n        \n        # Create treeview\n        columns = ("ID", "Timestamp", "Status", "Defects", "Focus", "Processing Time")\n        self.history_tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)\n        \n        # Configure columns\n        self.history_tree.heading("ID", text="ID")\n        self.history_tree.heading("Timestamp", text="Timestamp")\n        self.history_tree.heading("Status", text="Status")\n        self.history_tree.heading("Defects", text="Defects")\n        self.history_tree.heading("Focus", text="Focus")\n        self.history_tree.heading("Processing Time", text="Proc. Time")\n        \n        self.history_tree.column("ID", width=80, anchor=tk.CENTER)\n        self.history_tree.column("Timestamp", width=150, anchor=tk.CENTER)\n        self.history_tree.column("Status", width=80, anchor=tk.CENTER)\n        self.history_tree.column("Defects", width=200, anchor=tk.W)\n        self.history_tree.column("Focus", width=80, anchor=tk.CENTER)\n        self.history_tree.column("Processing Time", width=100, anchor=tk.CENTER)\n        \n        # Add scrollbars\n        v_scrollbar = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.history_tree.yview)\n        h_scrollbar = ttk.Scrollbar(table_frame, orient=tk.HORIZONTAL, command=self.history_tree.xview)\n        \n        self.history_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)\n        \n        # Grid layout\n        self.history_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n        v_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\n        h_scrollbar.grid(row=1, column=0, sticky=(tk.W, tk.E))\n        \n        # Bind selection event\n        self.history_tree.bind("<<TreeviewSelect>>", self._on_selection_change)\n        \n        # Configure grid weights\n        table_frame.columnconfigure(0, weight=1)\n        table_frame.rowconfigure(0, weight=1)\n    \n    def _create_details_panel(self, parent):\n        """Create inspection details panel."""\n        details_frame = ttk.LabelFrame(parent, text="Inspection Details", padding="10")\n        details_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(10, 0))\n        \n        # Create notebook for different detail views\n        self.details_notebook = ttk.Notebook(details_frame)\n        self.details_notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n        \n        # General info tab\n        self._create_general_info_tab()\n        \n        # Defects tab\n        self._create_defects_tab()\n        \n        # Technical tab\n        self._create_technical_tab()\n        \n        # Configure grid weights\n        details_frame.columnconfigure(0, weight=1)\n        details_frame.rowconfigure(0, weight=1)\n    \n    def _create_general_info_tab(self):\n        """Create general information tab."""\n        general_frame = ttk.Frame(self.details_notebook)\n        self.details_notebook.add(general_frame, text="General")\n        \n        # Create labels for inspection details\n        self.detail_labels = {}\n        \n        info_items = [\n            ("Inspection ID:", "id"),\n            ("Timestamp:", "timestamp"),\n            ("Status:", "status"),\n            ("Defect Count:", "defect_count"),\n            ("Focus Score:", "focus_score"),\n            ("Processing Time:", "processing_time"),\n            ("Trigger Type:", "trigger_type"),\n            ("Session ID:", "session_id")\n        ]\n        \n        for i, (label_text, key) in enumerate(info_items):\n            ttk.Label(general_frame, text=label_text).grid(row=i, column=0, sticky=tk.W, padx=(0, 10), pady=2)\n            self.detail_labels[key] = ttk.Label(general_frame, text="--")\n            self.detail_labels[key].grid(row=i, column=1, sticky=tk.W, pady=2)\n        \n        # Configure grid weights\n        general_frame.columnconfigure(1, weight=1)\n    \n    def _create_defects_tab(self):\n        """Create defects details tab."""\n        defects_frame = ttk.Frame(self.details_notebook)\n        self.details_notebook.add(defects_frame, text="Defects")\n        \n        # Defects listbox\n        self.defects_detail_listbox = tk.Listbox(\n            defects_frame,\n            height=8,\n            font=(GUI_CONFIG["font_family"], GUI_CONFIG["font_size"])\n        )\n        self.defects_detail_listbox.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))\n        \n        # Scrollbar\n        defects_scrollbar = ttk.Scrollbar(defects_frame, orient=tk.VERTICAL)\n        defects_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\n        \n        self.defects_detail_listbox.config(yscrollcommand=defects_scrollbar.set)\n        defects_scrollbar.config(command=self.defects_detail_listbox.yview)\n        \n        # Configure grid weights\n        defects_frame.columnconfigure(0, weight=1)\n        defects_frame.rowconfigure(0, weight=1)\n    \n    def _create_technical_tab(self):\n        """Create technical details tab."""\n        technical_frame = ttk.Frame(self.details_notebook)\n        self.details_notebook.add(technical_frame, text="Technical")\n        \n        # Technical details text\n        self.technical_text = tk.Text(\n            technical_frame,\n            height=8,\n            width=60,\n            font=(GUI_CONFIG["font_family"], GUI_CONFIG["font_size"] - 1),\n            state=tk.DISABLED,\n            wrap=tk.WORD\n        )\n        self.technical_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))\n        \n        # Scrollbar\n        technical_scrollbar = ttk.Scrollbar(technical_frame, orient=tk.VERTICAL)\n        technical_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\n        \n        self.technical_text.config(yscrollcommand=technical_scrollbar.set)\n        technical_scrollbar.config(command=self.technical_text.yview)\n        \n        # Configure grid weights\n        technical_frame.columnconfigure(0, weight=1)\n        technical_frame.rowconfigure(0, weight=1)\n    \n    def _create_action_buttons(self, parent):\n        """Create action buttons."""\n        actions_frame = ttk.Frame(parent)\n        actions_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(10, 0))\n        \n        # Refresh button\n        ttk.Button(\n            actions_frame,\n            text="Refresh",\n            command=self._refresh_history,\n            width=12\n        ).grid(row=0, column=0, padx=(0, 10))\n        \n        # Export button\n        ttk.Button(\n            actions_frame,\n            text="Export Selected",\n            command=self._export_selected,\n            width=15\n        ).grid(row=0, column=1, padx=(0, 10))\n        \n        # Export all button\n        ttk.Button(\n            actions_frame,\n            text="Export All",\n            command=self._export_all,\n            width=12\n        ).grid(row=0, column=2, padx=(0, 10))\n        \n        # Delete button\n        ttk.Button(\n            actions_frame,\n            text="Delete Selected",\n            command=self._delete_selected,\n            width=15\n        ).grid(row=0, column=3, padx=(0, 10))\n        \n        # Close button\n        ttk.Button(\n            actions_frame,\n            text="Close",\n            command=self.window.destroy,\n            width=10\n        ).grid(row=0, column=4, padx=(20, 0))\n        \n        # Configure grid weights\n        actions_frame.columnconfigure(5, weight=1)\n    \n    def _apply_filters(self):\n        """Apply filters to history data."""\n        try:\n            # Get filter values\n            start_date = datetime.strptime(self.start_date_var.get(), "%Y-%m-%d")\n            end_date = datetime.strptime(self.end_date_var.get(), "%Y-%m-%d") + timedelta(days=1)\n            defect_filter = self.defect_filter_var.get()\n            status_filter = self.status_filter_var.get()\n            \n            # Filter inspections\n            self.filtered_inspections = []\n            \n            for inspection in self.current_inspections:\n                # Date filter\n                inspection_date = datetime.fromisoformat(inspection['timestamp'])\n                if not (start_date <= inspection_date <= end_date):\n                    continue\n                \n                # Status filter\n                if status_filter != "All":\n                    inspection_status = "Passed" if not inspection['has_defects'] else "Failed"\n                    if status_filter != inspection_status:\n                        continue\n                \n                # Defect filter\n                if defect_filter != "All":\n                    defects = inspection.get('defects', [])\n                    if isinstance(defects, str):\n                        defects = json.loads(defects)\n                    if defect_filter not in defects:\n                        continue\n                \n                self.filtered_inspections.append(inspection)\n            \n            # Update display\n            self._update_history_display()\n            \n        except Exception as e:\n            self.logger.error(f"Error applying filters: {str(e)}")\n            messagebox.showerror("Error", f"Error applying filters: {str(e)}")\n    \n    def _clear_filters(self):\n        """Clear all filters."""\n        self.start_date_var.set((datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d"))\n        self.end_date_var.set(datetime.now().strftime("%Y-%m-%d"))\n        self.defect_filter_var.set("All")\n        self.status_filter_var.set("All")\n        \n        self.filtered_inspections = self.current_inspections.copy()\n        self._update_history_display()\n    \n    def _update_history_display(self):\n        """Update history table display."""\n        # Clear existing items\n        for item in self.history_tree.get_children():\n            self.history_tree.delete(item)\n        \n        # Add filtered inspections\n        for inspection in self.filtered_inspections:\n            # Format data for display\n            inspection_id = inspection.get('id', '--')\n            timestamp = datetime.fromisoformat(inspection['timestamp']).strftime('%Y-%m-%d %H:%M:%S')\n            status = "Passed" if not inspection['has_defects'] else "Failed"\n            \n            # Format defects\n            defects = inspection.get('defects', [])\n            if isinstance(defects, str):\n                defects = json.loads(defects)\n            defects_str = ', '.join(defects) if defects else "None"\n            \n            focus_score = f"{inspection.get('focus_score', 0):.1f}"\n            processing_time = f"{inspection.get('processing_time', 0):.3f}s"\n            \n            # Insert into tree\n            item = self.history_tree.insert('', 'end', values=(\n                inspection_id,\n                timestamp,\n                status,\n                defects_str,\n                focus_score,\n                processing_time\n            ))\n            \n            # Color code by status\n            if status == "Failed":\n                self.history_tree.set(item, "Status", "Failed")\n                # Note: Treeview tag coloring would go here if needed\n        \n        # Update results count\n        self.results_label.config(text=f"Results: {len(self.filtered_inspections)}")\n    \n    def _on_selection_change(self, event):\n        """Handle selection change in history table."""\n        selection = self.history_tree.selection()\n        if selection:\n            item = selection[0]\n            values = self.history_tree.item(item, 'values')\n            \n            # Find the inspection data\n            inspection_id = int(values[0])\n            selected_inspection = None\n            \n            for inspection in self.filtered_inspections:\n                if inspection.get('id') == inspection_id:\n                    selected_inspection = inspection\n                    break\n            \n            if selected_inspection:\n                self._update_details_display(selected_inspection)\n    \n    def _update_details_display(self, inspection: Dict[str, Any]):\n        """Update inspection details display."""\n        # Update general info\n        self.detail_labels['id'].config(text=str(inspection.get('id', '--')))\n        self.detail_labels['timestamp'].config(text=inspection.get('timestamp', '--'))\n        self.detail_labels['status'].config(text="Passed" if not inspection.get('has_defects', False) else "Failed")\n        self.detail_labels['defect_count'].config(text=str(inspection.get('defect_count', 0)))\n        self.detail_labels['focus_score'].config(text=f"{inspection.get('focus_score', 0):.1f}")\n        self.detail_labels['processing_time'].config(text=f"{inspection.get('processing_time', 0):.3f}s")\n        self.detail_labels['trigger_type'].config(text=inspection.get('trigger_type', '--'))\n        self.detail_labels['session_id'].config(text=inspection.get('session_id', '--'))\n        \n        # Update defects list\n        self.defects_detail_listbox.delete(0, tk.END)\n        defects = inspection.get('defects', [])\n        if isinstance(defects, str):\n            defects = json.loads(defects)\n        \n        confidence_scores = inspection.get('confidence_scores', [])\n        if isinstance(confidence_scores, str):\n            confidence_scores = json.loads(confidence_scores)\n        \n        if defects:\n            for i, defect in enumerate(defects):\n                confidence = confidence_scores[i] if i < len(confidence_scores) else 0.0\n                self.defects_detail_listbox.insert(tk.END, f"• {defect} (Confidence: {confidence:.1%})")\n        else:\n            self.defects_detail_listbox.insert(tk.END, "No defects detected")\n        \n        # Update technical details\n        self.technical_text.config(state=tk.NORMAL)\n        self.technical_text.delete(1.0, tk.END)\n        \n        technical_info = f"""Raw Data:\n{'-' * 40}\n"""
n        \n        # Add all inspection data\n        for key, value in inspection.items():\n            if key not in ['defects', 'defect_locations', 'confidence_scores']:  # Skip complex JSON fields\n                technical_info += f"{key}: {value}\n"\n        \n        # Add defect locations if available\n        locations = inspection.get('defect_locations', [])\n        if isinstance(locations, str):\n            locations = json.loads(locations)\n        \n        if locations:\n            technical_info += f"\nDefect Locations:\n{'-' * 20}\n"\n            for i, location in enumerate(locations):\n                technical_info += f"Defect {i+1}: {location}\n"\n        \n        self.technical_text.insert(tk.END, technical_info)\n        self.technical_text.config(state=tk.DISABLED)\n    \n    def _refresh_history(self):\n        """Refresh history data from database."""\n        if self.database:\n            try:\n                # Get recent inspections\n                self.current_inspections = self.database.get_recent_inspections(1000)\n                self.filtered_inspections = self.current_inspections.copy()\n                \n                # Update display\n                self._update_history_display()\n                \n            except Exception as e:\n                self.logger.error(f"Error refreshing history: {str(e)}")\n                messagebox.showerror("Error", f"Error refreshing history: {str(e)}")\n    \n    def _export_selected(self):\n        """Export selected inspection."""\n        selection = self.history_tree.selection()\n        if not selection:\n            messagebox.showwarning("Warning", "No inspection selected")\n            return\n        \n        # Get selected inspection\n        item = selection[0]\n        values = self.history_tree.item(item, 'values')\n        inspection_id = int(values[0])\n        \n        selected_inspection = None\n        for inspection in self.filtered_inspections:\n            if inspection.get('id') == inspection_id:\n                selected_inspection = inspection\n                break\n        \n        if selected_inspection:\n            self._export_inspections([selected_inspection])\n    \n    def _export_all(self):\n        """Export all filtered inspections."""\n        if not self.filtered_inspections:\n            messagebox.showwarning("Warning", "No inspections to export")\n            return\n        \n        self._export_inspections(self.filtered_inspections)\n    \n    def _export_inspections(self, inspections: List[Dict[str, Any]]):\n        """Export inspections to file."""\n        try:\n            from tkinter import filedialog\n            \n            filename = filedialog.asksaveasfilename(\n                defaultextension=".json",\n                filetypes=[("JSON files", "*.json"), ("CSV files", "*.csv"), ("All files", "*.*")]\n            )\n            \n            if filename:\n                if filename.endswith('.csv'):\n                    self._export_to_csv(inspections, filename)\n                else:\n                    self._export_to_json(inspections, filename)\n                \n                messagebox.showinfo("Success", f"Exported {len(inspections)} inspections to {filename}")\n        \n        except Exception as e:\n            self.logger.error(f"Error exporting inspections: {str(e)}")\n            messagebox.showerror("Error", f"Error exporting inspections: {str(e)}")\n    \n    def _export_to_json(self, inspections: List[Dict[str, Any]], filename: str):\n        """Export inspections to JSON file."""\n        with open(filename, 'w') as f:\n            json.dump(inspections, f, indent=2, default=str)\n    \n    def _export_to_csv(self, inspections: List[Dict[str, Any]], filename: str):\n        """Export inspections to CSV file."""\n        import csv\n        \n        if not inspections:\n            return\n        \n        # Define CSV columns\n        columns = ['id', 'timestamp', 'has_defects', 'defect_count', 'focus_score', 'processing_time']\n        \n        with open(filename, 'w', newline='') as f:\n            writer = csv.DictWriter(f, fieldnames=columns)\n            writer.writeheader()\n            \n            for inspection in inspections:\n                row = {col: inspection.get(col, '') for col in columns}\n                writer.writerow(row)\n    \n    def _delete_selected(self):\n        """Delete selected inspection."""\n        selection = self.history_tree.selection()\n        if not selection:\n            messagebox.showwarning("Warning", "No inspection selected")\n            return\n        \n        # Confirm deletion\n        if messagebox.askyesno("Confirm Delete", "Are you sure you want to delete the selected inspection?"):\n            # Get selected inspection ID\n            item = selection[0]\n            values = self.history_tree.item(item, 'values')\n            inspection_id = int(values[0])\n            \n            # Delete from database (implementation would depend on database methods)\n            # For now, just show a placeholder message\n            messagebox.showinfo("Info", "Delete functionality not implemented yet")\n    \n    def set_database(self, database):\n        """Set the database instance."""\n        self.database = database\n        self._refresh_history()\n    \n    def show(self):\n        """Show the history browser."""\n        self.window.deiconify()\n        self.window.focus_set()\n        self._refresh_history()\n    \n    def hide(self):\n        """Hide the history browser."""\n        self.window.withdraw()\n    \n    def destroy(self):\n        """Destroy the history browser."""\n        self.window.destroy()\n\n\n# Test history browser\nif __name__ == "__main__":\n    import sys\n    import os\n    \n    # Add project root to path\n    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n    \n    # Create test history browser\n    browser = HistoryBrowser()\n    \n    # Test with sample data\n    sample_inspections = [\n        {\n            'id': 1,\n            'timestamp': '2024-01-15T10:30:00',\n            'has_defects': True,\n            'defect_count': 2,\n            'defects': ['Missing Hole', 'Open Circuit'],\n            'defect_locations': [{'bbox': [100, 100, 200, 200]}, {'bbox': [300, 300, 400, 400]}],\n            'confidence_scores': [0.85, 0.75],\n            'focus_score': 150.0,\n            'processing_time': 0.05,\n            'trigger_type': 'auto',\n            'session_id': 'session_1'\n        },\n        {\n            'id': 2,\n            'timestamp': '2024-01-15T10:35:00',\n            'has_defects': False,\n            'defect_count': 0,\n            'defects': [],\n            'defect_locations': [],\n            'confidence_scores': [],\n            'focus_score': 155.0,\n            'processing_time': 0.048,\n            'trigger_type': 'auto',\n            'session_id': 'session_1'\n        }\n    ]\n    \n    # Simulate database\n    class MockDatabase:\n        def get_recent_inspections(self, limit):\n            return sample_inspections\n    \n    browser.set_database(MockDatabase())\n    browser.window.mainloop()